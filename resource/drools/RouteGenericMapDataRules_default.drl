package drools

import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java.lang.String;
import java.net.URL;
import com.neustar.iot.spark.rules.RulesForwardWorker;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.net.util.Base64;

global RulesForwardWorker worker
global Map<String,Object> attrMap
global String rest_Uri
global String jdbc_url
global String hdfs_url
global String result
global String token

dialect "java"

declare RegistryMessage
    message : Map
    result: String
    endpoint: String
end

declare RegistryResult
    message : Map
    result: String
    endpoint: String
end

declare ErrorMessage
    message : Map
    exception: String
    stackTrace: String
end

declare MQTTResult
    message : Map
    result: String
    endpoint: String
end



declare DashBoardData
    message : Map
    type: String
end

rule "Incoming Registry Post"
    when
        $messageMap : Map( this["messagetype"] == "REGISTRY_POST" )
    then
    	System.out.println("****** Incoming Registry Post ******");
        worker = new RulesForwardWorker();
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", "/api/v1/login/internal");
		attrMap.put("header", "{\"Content-Type\": \"application/json\"}");	
		$messageMap.put("payload", "{\"clientId\":\"c7GjNFZGzRO8TdhCbVINDytKOOGs3QhV\", \"clientSecret\":\"tJugSnP8ny_TYk3rrA8x6jln7PJ682e8gWuyEHxdzp09avV_tKO1a9WJuuRmGHA3\"}");
        String tokenjson = worker.localCachedRestPost("http://54.149.9.196", $messageMap,  attrMap);
        token = worker.searchJson("jwt",tokenjson).toString();
             
        rest_Uri =  new String("http://54.149.9.196");
        
        Map regPayloadMap = (Map)worker.searchMapFirstSubKey("RemoteRequest",$messageMap);
        
        String txId = (String)worker.searchMap("txId",regPayloadMap);
        String payload = (String)worker.searchMap("payload",regPayloadMap);
        String path = "/api/v1/internal/devices/rshadow/"+txId+"/resolve";
        
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", path);
		attrMap.put("header", "{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer "+token+"\"}");	
		
        $messageMap.put("payload", payload);
        result = worker.remoteRestPost(rest_Uri, $messageMap,  attrMap);

        $messageMap.put("endpoint_uri", rest_Uri);
        $messageMap.put("endpoint_attr", attrMap);
        $messageMap.put("result", result);
		 
		insertLogical( new DashBoardData( $messageMap,"hub" ) );
end


rule "Device Discovery Message Registry Post"
    when
        $messageMap : Map( this["messagetype"] == "DEVICE_ONBOARDING" )
    then
    	System.out.println("****** Device Discovery Message Registry Post ******");
        worker = new RulesForwardWorker();
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", "/api/v1/login/internal");
		attrMap.put("header", "{\"Content-Type\": \"application/json\"}");	
		$messageMap.put("payload", "{\"clientId\":\"c7GjNFZGzRO8TdhCbVINDytKOOGs3QhV\", \"clientSecret\":\"tJugSnP8ny_TYk3rrA8x6jln7PJ682e8gWuyEHxdzp09avV_tKO1a9WJuuRmGHA3\"}");
        String tokenjson = worker.localCachedRestPost("http://54.149.9.196", $messageMap,  attrMap);
        token = worker.searchJson("jwt",tokenjson).toString();
             
        rest_Uri =  new String("http://54.149.9.196");
        
        Map regPayloadMap = (Map)worker.searchMapFirstSubKey("RemoteRequest",$messageMap);
        
        //improve this by extracting hubid in initial stream process and appending to deviceid attr
        String hubIdPath = (String)worker.searchMap("path",regPayloadMap);
        String hubId = hubIdPath.split("device")[1].split("/")[1];
        Object payload = worker.searchMap("payload",regPayloadMap);
        String path = "/api/v1/devices/onboard?hub_id="+hubId;        
        
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", path);
		attrMap.put("header", "{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer "+token+"\"}");	
		
        $messageMap.put("payload", payload);
        result = worker.remoteRestPost(rest_Uri, $messageMap,  attrMap);

        $messageMap.put("endpoint_uri", rest_Uri);
        $messageMap.put("endpoint_attr", attrMap);
        $messageMap.put("result", result);
		 
		System.out.println("result = "+result); 
		insertLogical( new DashBoardData( $messageMap,"registry" ) );
end

rule "Incoming Registry Put"
    when
        $messageMap : Map( this["messagetype"] == "REGISTRY_PUT" )
    then
    	System.out.println("****** Incoming Registry Put ******");
        worker = new RulesForwardWorker();
        
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", "/api/v1/login/internal");
		attrMap.put("header", "{\"Content-Type\": \"application/json\"}");	
		$messageMap.put("payload", "{\"clientId\":\"c7GjNFZGzRO8TdhCbVINDytKOOGs3QhV\", \"clientSecret\":\"tJugSnP8ny_TYk3rrA8x6jln7PJ682e8gWuyEHxdzp09avV_tKO1a9WJuuRmGHA3\"}");
        String tokenjson = worker.localCachedRestPost("http://54.149.9.196", $messageMap,  attrMap);
        token = worker.searchJson("jwt",tokenjson).toString();
        
        rest_Uri =  new String("http://54.149.9.196");
        
        Map regPayloadMap = (Map)worker.searchMapFirstSubKey("RemoteRequest",$messageMap);
        
		String deviceId = (String)worker.searchMap("deviceId",regPayloadMap); 
        String encodedPath = DatatypeConverter.printBase64Binary( ((String)worker.searchMap("path",regPayloadMap)).getBytes() );
        String id = deviceId+"/"+encodedPath;
        System.out.println("id="+id+" , deviceid ="+deviceId);
        String path = "/api/v1/internal/devices/update";
        String data = (String)worker.searchMap("payload",regPayloadMap); 
        String payload = "{ \"id\":\""+id+"\", \"data\":"+data+" }";              
        
        attrMap = new HashMap<String,Object>();
		attrMap.put("path", path);
		attrMap.put("header", "{\"Content-Type\": \"application/json\", \"Authorization\": \"Bearer "+token+"\"}");	
		
		$messageMap.put("payload", payload);
        result = worker.remoteRestPut(rest_Uri, $messageMap,  attrMap);
        
        $messageMap.put("endpoint_uri", rest_Uri);
        $messageMap.put("endpoint_attr", attrMap);
        $messageMap.put("result", result);
        
       	insertLogical( new DashBoardData( $messageMap,"hub") );
end

rule "Incoming Registry Response"
    when
        $messageMap : Map( this["payload"] != null && this["messagetype"] == "REGISTRY_RESPONSE" )
    then
    	System.out.println("****** Incoming Registry Response ******");	
    	
    	String mqttBrokerUri = new String("tcp://ec2-52-42-35-89.us-west-2.compute.amazonaws.com:1883");
    	
    	try{
		worker = new RulesForwardWorker();
		Map message = $messageMap;
		//System.out.println(message);
		
		Map payload = (Map)worker.searchMap("payload",message);
		String jsonpayload = (String)worker.searchMap("string",payload);
		//System.out.println("jsonpayload = "+jsonpayload);
		Map payloadMap = worker.parseJsonData(jsonpayload.getBytes());
		
		//System.out.println("payloadMap = "+payloadMap);
		String recepient = (String)worker.searchMap("recepient",payloadMap);
		String payloadAvroschemaUrl = (String)worker.searchMap("schemaUrl",payloadMap);
		//System.out.println("payloadAvroschemaUrl = "+payloadAvroschemaUrl);
		byte[] decodedAvroPayloadBytes = Base64.decodeBase64((String)worker.searchMap("payload",payloadMap));
		//deserialize avro using schema
		Map regPayloadMap = worker.parseAvroData(decodedAvroPayloadBytes, new URL(payloadAvroschemaUrl));
		//Map regPayloadMap = (Map)worker.searchMapFirstSubKey("RemoteRequest",message);
		
		//System.out.println("regPayloadMap = "+regPayloadMap);
		String deviceId = (String)worker.searchMap("deviceId",regPayloadMap);
		String topic = null;
		
		if(recepient.equals("DEVICE"))
			topic = "device/"+deviceId+"/in";
		else if(recepient.equals( "HUB"))
			topic = "hub/"+deviceId+"/in";
			
		attrMap = new HashMap<String,Object>();
		attrMap.put("topic", topic);
		attrMap.put("qos", 2);
		//System.out.println("deviceId="+deviceId+"  data = "+regPayloadMap);
		
		result = worker.remoteMQTTCall(mqttBrokerUri,"JavaSample", regPayloadMap,  attrMap,  true);
		message.put("result",result);
		//System.out.println(message);
		//System.out.println("Message sent to MQTT returned: " + result);
		
		message.put("decodedpayload", regPayloadMap);
		
		insertLogical( new MQTTResult(message,result,mqttBrokerUri ));
		
		}catch(Throwable e){
			System.out.println(e.toString());
			//e.printStackTrace();
			insertLogical( new ErrorMessage($messageMap,e.toString(),Arrays.toString(e.getStackTrace())));
		}
    		 
end

rule "Process Successful Registry results"
	when
		$registryMessage : RegistryMessage( result contains "SUCCESS" )		
	then
		System.out.println("****** Process Successful Registry results ******");
		Map message = $registryMessage.getMessage();
		System.out.println("Message sent to registry put/post returned SUCCESS: " + message.get("result") );
		System.out.println("Now sending to MQTT and awaiting response ");
		
		attrMap = new HashMap<String,Object>();
		attrMap.put("topic", "device/+/in");
		attrMap.put("qos", 2);

		String mqttBrokerUri = new String("tcp://ec2-52-42-35-89.us-west-2.compute.amazonaws.com:1883");	
		worker = new RulesForwardWorker();	
		result = worker.remoteMQTTCall(mqttBrokerUri,"JavaSample", message,  attrMap, null);
		
		message.put("endpoint_uri", mqttBrokerUri);
        message.put("result", result);
		insertLogical( new DashBoardData(message,"registry" ) );
end
	
	
rule "Process Failed Registry results"
	when
		$registryMessage : RegistryMessage(result contains "ERROR" )		
	then
		System.out.println("****** Process Failed Registry results ******");
		Map message = $registryMessage.getMessage();
		System.out.println("Message sent to registry put returned ERROR: " + message.get("result") );
		insertLogical( new DashBoardData(message,"fail" ));
end	

rule "Exception Error Handler"
	when
		$errorMessage : ErrorMessage()			
	then
		System.out.println("****** Exception Error Handler ******");
		Map message = $errorMessage.getMessage();
		message.put("exception",$errorMessage.getException() );
		message.put("stackTrace",$errorMessage.getStackTrace() );
		//System.out.println(message);
		insertLogical( new DashBoardData(message,new String("exception") ));
end	

rule "Process MQTT Error Response"
	when
		$mqttResult : MQTTResult( result contains "ERROR" || result contains "exception")			
	then
		System.out.println("****** Process MQTT Error Response ******");
		Map message = $mqttResult.getMessage();
		message.put("endpoint",$mqttResult.getEndpoint());
		message.put("result",$mqttResult);
		System.out.println(message);
		insertLogical( new DashBoardData(message,new String("error") ));
end	

rule "Process MQTT Successful Response"
	when
		$mqttResult : MQTTResult( result contains "SUCCESS" )			
	then
		System.out.println("****** Process MQTT Successful Response ******");
		Map message = $mqttResult.getMessage();
		insertLogical( new DashBoardData(message,new String("success") ));
end	

rule "Dashboard Reporting"
    when
         $dashBoardData : DashBoardData()
    then
    	System.out.println("****** Dashboard Reporting ******");
        worker = new RulesForwardWorker();
        rest_Uri  =  new String("https://search-iotaselasticsearch-qtpuykpxgabuzfidzncsfyp7k4.us-west-2.es.amazonaws.com/ioteventindex/"+$dashBoardData.getType());
        String ret = worker.remoteElasticSearchPost(rest_Uri, $dashBoardData.getMessage(),  null);

        System.out.println("Message sent to ElasticSearch returned : " + ret );
end
	
rule "Handle Notifications"
    when
         $messageMap : Map( this["messagetype"] == "NOTIFICATION" )
    then
    	System.out.println("****** Handle Notifications ******");
       insertLogical( new DashBoardData($messageMap,new String("notification") ));
end

